#include <iostream>
#include <unordered_map>
#include <fstream>
#include <vector>
#include <set>
#include "queue"

using namespace std;

int difference(string cs1, string cs2) {
    string d = "";
    int i = 0;
    int k = 0;
    for (; i < cs1.length() && k < cs2.length();) {
        if (cs1.length() <= cs2.length()) {
            if (cs1[i] != cs2[k] && k <= i) { //diffrence of cs2 from cs1
                d += cs2[i];

            } else if ((cs1[i] != cs2[k] && i <= k))
                d += cs2[k];
        } else {
            difference(cs2, cs1);

        }

        if (i == cs1.length() - 1 && k != cs2.length() - 1) {
            k++;

        } else if (i != cs1.length() - 1 && k == cs2.length() - 1) {
            i++;
        } else {
            k++;
            i++;
        }

    }
    if(d.length()==1)
        return cs2.find(d);
    else
        return -1;
}


int main() {
    unordered_map<string,int> dictionary;
    unordered_map<int, string> vertices;
    vector<string>adjWords;

    ifstream file("words.txt");
    string words, word1, word2, temp;

    std::set<string>::iterator it;
    std::set<string>::iterator it2;
    int wordC = 0;
    int v = 0;
    while (file >> words) {
        dictionary[words] = wordC;
        vertices[dictionary[words]]=words;
        wordC++;
    }
    Graph g(dictionary.size());
    file.close();
    file.open("words.txt");


    while (word1[0] != '*') {
        set<string> wordSet;
        cout << "Please enter two words :";
        cin >> word1 >> word2;
        if (dictionary.find(word1) == dictionary.end() ||
            dictionary.find(word2) == dictionary.end()) {   //Check if the words in the dictionary
            cout << "One of the words is not in the dictionary ,please enter new words!! " << endl;
        } else {
            file.close();
            file.open("words.txt");
            while (file >> words) { //gerek yokkk
                if (abs(int(word1.length()) - int(words.length())) <= abs(int(word1.length()) -
                                                                          int(word2.length()))) { //uzunluk farkı aranan kelimeler arasında farka eşit olan kelimeleri al
                    wordSet.insert(words);

                }

            }
            string tmp1, tmp2;
            for (it = wordSet.begin(); it != wordSet.end(); it++) {
                tmp1 = *it;
                for (it2 = wordSet.begin(); it2 != wordSet.end(); it2++) {
                    tmp2 = *it2;
                    if (tmp1 != tmp2 && difference(tmp1, tmp2)!=-1 ) {
                     // cout<<tmp1+"-"+ tmp2 + to_string(difference(tmp1, tmp2))<<endl;
                        g.addEdge(dictionary[tmp1],dictionary[tmp2]);
                    }

                }

            }
            cout << "Following is Breadth First Traversal "
                 << "(starting from vertex " + vertices[dictionary[word1]]+ "\n"; //aranan kelime ile de karşılaştırma yap!!!
            g.BFS(dictionary[word1],vertices,dictionary[word2]);


        }

    }


    return 0;
}
